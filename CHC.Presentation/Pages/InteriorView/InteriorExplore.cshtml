@page
@using CHC.Domain.Enums
@using CHC.Presentation.Extensions
@model CHC.Presentation.Pages.InteriorView.InteriorExploreModel
@{
    ViewData["Title"] = "Explore";
}
<section class="blog_area padding_top">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 mb-5 mb-lg-0">
                <div class="blog_left_sidebar">
                    @foreach(var item in Model.Interiors)
                    {
                        var month = item.CreatedAt.GetMonthKeyword();
                        <article class="blog_item">
                            <div class="blog_item_img">
                                <img class="card-img rounded-0" src="~/img/blog/single_blog_1.png" alt="">
                                <a href="#" class="blog_item_date text-center">
                                    <h3>@Html.DisplayFor(model => item.CreatedAt.Day)</h3>
                                    <p>@Html.DisplayFor(model => month)</p>
                                </a>
                            </div>

                            <div class="blog_details">
                                <a class="d-inline-block" asp-page="./InteriorDetail" asp-route-id="@item.Id">
                                    <h2>@Html.DisplayFor(model => item.Name)</h2>
                                </a>
                                <p>
                                    @Html.DisplayFor(model => item.Description)
                                </p>
                                <ul class="blog-info-link">
                                    <li><a href="#"><i class="bi bi-geo-alt"></i>@Html.DisplayFor(model => item.Location)</a></li>
                                    @foreach(var i in item.InteriorDetails)
                                    {
                                        <li><span>@Html.DisplayFor(model => i.Material.Name) </span> <span>@Html.DisplayFor(model => i.Quantity)</span></li>
                                    }
                                </ul>
                            </div>
                        </article>
                    }

                    @* Paging *@
                    <div class="blog-pagination justify-content-center d-flex">
                        <ul class="pagination">
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-page="InteriorExplore" asp-route-pageindex="@(Model.PageIndex - 1)"><i class="ti-angle-left"></i></a>
                                </li>
                            }
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                if (i == Model.PageIndex)
                                {
                                    <li class="page-item">
                                        <a class="page-link disabled">@i</a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item">
                                        <a class="page-link disabled" asp-page="InteriorExplore" asp-route-pageindex="@i">@i</a>
                                    </li>
                                }
                            }
                            @if (Model.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-page="InteriorExplore" asp-route-pageindex="@(Model.PageIndex + 1)">
                                        <i class="ti-angle-right"></i>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>  
            <div class="col-lg-4">
                <div class="blog_right_sidebar">
                    <aside class="single_sidebar_widget search_widget">
                        <form method="get">
                            <div class="form-group">
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" placeholder='Search Keyword' name="SearchString" value="@Model.SearchString">
                                    <div class="input-group-append">
                                        <button class="btn" type="button"><i class="ti-search"></i></button>
                                    </div>
                                </div>
                            </div>
                            <button class="button rounded-0 primary-bg text-white w-100 btn_1"
                                    type="submit">
                                Search
                            </button>
                        </form>
                    </aside>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}